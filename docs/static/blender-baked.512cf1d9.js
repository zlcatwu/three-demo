import"./dynamic-import-polyfill.f8def49a.js";/* empty css               */import{i as n,s as e,T as r,G as o,S as t,a as i,M as a,b as c,C as l,P as v,O as g,B as d,c as s,A as m,d as f,W as x,e as u}from"./vendor.0603ed81.js";const P={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{P.width=window.innerWidth,P.height=window.innerHeight,E.aspect=P.width/P.height,E.updateProjectionMatrix(),D.setSize(P.width,P.height),D.setPixelRatio(Math.min(window.devicePixelRatio,2)),I.uniforms.uDevicePixelRatio.value=Math.min(window.devicePixelRatio,2)}));const y=location.hash.includes("debug"),z={},w=new n.GUI({width:400});!y&&w.hide();const h=new e;y&&document.body.appendChild(h.dom);const p=new r,C=new o,S=document.querySelector("#webgl"),b=new t,_=p.load("/three-demo/static/baked.48eb4d01.jpg");_.flipY=!1,_.encoding=i;const M=new a({map:_}),T=new a({color:16750113}),j=new c({uniforms:{uTime:{value:0},uColorStart:{value:new l("#2590e8")},uColorEnd:{value:new l("#8affff")}},vertexShader:"varying vec2 vUv;\r\n\r\nvoid main () {\r\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    vec4 projectionPosition = projectionMatrix * viewPosition;\r\n\r\n    gl_Position = projectionPosition;\r\n    vUv = uv;\r\n}\r\n",fragmentShader:"uniform float uTime;\r\nuniform vec3 uLightColor;\r\nuniform vec3 uColorStart;\r\nuniform vec3 uColorEnd;\r\n\r\nvarying vec2 vUv;\r\n\r\nvec4 permute(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }\r\nvec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\r\nvec3 fade(vec3 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\r\n\r\nfloat cnoise(vec3 P)\r\n{\r\n    vec3 Pi0 = floor(P); // Integer part for indexing\r\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r\n    Pi0 = mod(Pi0, 289.0);\r\n    Pi1 = mod(Pi1, 289.0);\r\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n    vec4 iz0 = Pi0.zzzz;\r\n    vec4 iz1 = Pi1.zzzz;\r\n\r\n    vec4 ixy = permute(permute(ix) + iy);\r\n    vec4 ixy0 = permute(ixy + iz0);\r\n    vec4 ixy1 = permute(ixy + iz1);\r\n\r\n    vec4 gx0 = ixy0 / 7.0;\r\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\r\n    gx0 = fract(gx0);\r\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n    vec4 sz0 = step(gz0, vec4(0.0));\r\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n    vec4 gx1 = ixy1 / 7.0;\r\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\r\n    gx1 = fract(gx1);\r\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n    vec4 sz1 = step(gz1, vec4(0.0));\r\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n    g000 *= norm0.x;\r\n    g010 *= norm0.y;\r\n    g100 *= norm0.z;\r\n    g110 *= norm0.w;\r\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n    g001 *= norm1.x;\r\n    g011 *= norm1.y;\r\n    g101 *= norm1.z;\r\n    g111 *= norm1.w;\r\n\r\n    float n000 = dot(g000, Pf0);\r\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n    float n111 = dot(g111, Pf1);\r\n\r\n    vec3 fade_xyz = fade(Pf0);\r\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n\r\n    return 2.2 * n_xyz;\r\n}\r\n\r\nvoid main () {\r\n\r\n    vec2 displacedUv = vUv + cnoise(vec3(vUv * 5.0, uTime * 0.1));\r\n\r\n    float strength = cnoise(vec3(displacedUv * 5.0, uTime * 0.2));\r\n\r\n    float outerGlow = distance(vUv, vec2(0.5)) * 5.0 - 1.4;\r\n    strength += outerGlow;\r\n\r\n    strength += step(-0.2, strength) * 0.8;\r\n    strength = clamp(strength, 0.0, 1.0);\r\n\r\n    vec3 color = mix(uColorStart, uColorEnd, strength);\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n}\r\n"});z.portalColorStart="#2590e8",z.portalColorEnd="#8affff",w.addColor(z,"portalColorStart").onChange((()=>{j.uniforms.uColorStart.value.set(z.portalColorStart)})),w.addColor(z,"portalColorEnd").onChange((()=>{j.uniforms.uColorEnd.value.set(z.portalColorEnd)})),C.load("/three-demo/static/scene.ca0ba553.glb",(n=>{n.scene.children.find((n=>"baked"===n.name)).material=M,n.scene.children.find((n=>"poleLightA"===n.name)).material=T,n.scene.children.find((n=>"poleLightB"===n.name)).material=T,n.scene.children.find((n=>"portalLight"===n.name)).material=j,b.add(n.scene)}));const E=new v(75,P.width/P.height,.1,100);E.position.set(2,2,2),b.add(E);const R=new g(E,S);R.enableDamping=!0;const U=new d,A=new Float32Array(90),F=new Float32Array(30);for(let G=0;G<30;G++)A[3*G]=3.5*(Math.random()-.5),A[3*G+1]=1.5*Math.random(),A[3*G+2]=3.5*(Math.random()-.5),F[G]=Math.random()+.5;U.setAttribute("position",new s(A,3)),U.setAttribute("aScale",new s(F,1));const I=new c({uniforms:{uDevicePixelRatio:{value:Math.min(window.devicePixelRatio,2)},uSize:{value:40},uTime:{value:0}},transparent:!0,blending:m,depthWrite:!1,vertexShader:"attribute float aScale;\r\n\r\nuniform float uDevicePixelRatio;\r\nuniform float uSize;\r\nuniform float uTime;\r\n\r\nvoid main () {\r\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n\r\n    modelPosition.y += aScale * 0.3 * sin(uTime + modelPosition.x * 100.0);\r\n\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    vec4 projectionPosition = projectionMatrix * viewPosition;\r\n\r\n    gl_Position = projectionPosition;\r\n    gl_PointSize = uSize * uDevicePixelRatio * aScale;\r\n    gl_PointSize *= (1.0 / -viewPosition.z);\r\n}\r\n",fragmentShader:"void main () {\r\n    float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\r\n    float strength = 0.1 / distanceToCenter - 0.1 * 2.0;\r\n    gl_FragColor = vec4(1.0, 1.0, 1.0, strength);\r\n}\r\n"}),q=new f(U,I);b.add(q);const D=new x({canvas:S});D.setSize(P.width,P.height),D.setPixelRatio(Math.min(window.devicePixelRatio,2)),D.outputEncoding=i,z.clearColor="#201919",D.setClearColor(z.clearColor),w.addColor(z,"clearColor").onChange((()=>{D.setClearColor(z.clearColor)}));const L=new u;!function n(){h.begin(),R.update();const e=L.getElapsedTime();I.uniforms.uTime.value=e,j.uniforms.uTime.value=e,D.render(b,E),h.end(),requestAnimationFrame(n)}();
